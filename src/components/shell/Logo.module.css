/* Base: ensure a stable inline box and predictable metrics */
.glitch {
    position: relative;
    display: inline-block;
    line-height: 1;
    white-space: nowrap;
    will-change: transform;
}

/* Two overlaid copies of the text used to create the RGB split */
.glitch::before,
.glitch::after {
    content: attr(data-text);
    position: absolute;
    inset: 0; /* shorthand for top/right/bottom/left: 0 */
    pointer-events: none;
    opacity: 0; /* hidden until hover */
    font: inherit;
    letter-spacing: inherit;
    line-height: inherit;
    white-space: inherit;
    transform: translate3d(0, 0, 0); /* avoids sub-pixel drift */
    will-change: transform, clip-path, opacity;
}

/* Cyan layer offset */
.glitch::before {
    text-shadow:
        var(--glitch-strength) 0 var(--glitch-cyan),
        calc(var(--glitch-strength) * -0.5) 0 var(--glitch-cyan);
}

/* Magenta layer offset */
.glitch::after {
    text-shadow:
        calc(var(--glitch-strength) * -1) 0 var(--glitch-magenta),
        calc(var(--glitch-strength) * 0.5) 0 var(--glitch-magenta);
}

/* Hover: trigger motion and a slight pop in contrast/saturation */
.glitch:hover {
    animation: glitch-shake var(--glitch-speed) steps(2, end) infinite;
    filter: saturate(1.1) contrast(1.05);
}

.glitch:hover::before,
.glitch:hover::after {
    opacity: 1;
    animation-play-state: running;
}

/* Run distinct slice animations on the coloured copies */
.glitch:hover::before {
    animation:
        glitch-slice-a var(--glitch-speed) steps(2, end) infinite
            alternate-reverse,
        glitch-flicker var(--glitch-speed) steps(2, end) infinite;
}

.glitch:hover::after {
    animation:
        glitch-slice-b var(--glitch-speed) steps(2, end) infinite alternate,
        glitch-flicker var(--glitch-speed) steps(2, end) infinite reverse;
}

/* --- Keyframes --- */
/* Base text: gentle shake with occasional skew blips */
@keyframes glitch-shake {
    0% {
        transform: translate3d(0, 0, 0) skewX(0deg);
    }
    10% {
        transform: translate3d(0.5px, -0.5px, 0) skewX(0deg);
    }
    20% {
        transform: translate3d(-1px, 0.5px, 0) skewX(-0.3deg);
    }
    30% {
        transform: translate3d(1px, 0, 0) skewX(0.3deg);
    }
    40% {
        transform: translate3d(-0.5px, 1px, 0) skewX(0deg);
    }
    50% {
        transform: translate3d(0.5px, -1px, 0) skewX(-0.2deg);
    }
    60% {
        transform: translate3d(-1px, 0, 0) skewX(0.2deg);
    }
    70% {
        transform: translate3d(1px, 0.5px, 0) skewX(0deg);
    }
    80% {
        transform: translate3d(-0.5px, -0.5px, 0) skewX(0.2deg);
    }
    90% {
        transform: translate3d(0.5px, 0, 0) skewX(-0.2deg);
    }
    100% {
        transform: translate3d(0, 0, 0) skewX(0deg);
    }
}

/* Cyan slice: vertical banding with horizontal twitches */
@keyframes glitch-slice-a {
    0% {
        clip-path: inset(0 0 80% 0);
        transform: translate3d(0, 0, 0);
    }
    10% {
        clip-path: inset(10% 0 65% 0);
        transform: translate3d(var(--glitch-strength), 0, 0);
    }
    20% {
        clip-path: inset(30% 0 40% 0);
        transform: translate3d(0, 0, 0);
    }
    30% {
        clip-path: inset(45% 0 30% 0);
        transform: translate3d(calc(var(--glitch-strength) * -1), 0, 0);
    }
    40% {
        clip-path: inset(60% 0 20% 0);
        transform: translate3d(0, 0, 0);
    }
    50% {
        clip-path: inset(70% 0 10% 0);
        transform: translate3d(var(--glitch-strength), 0, 0);
    }
    60% {
        clip-path: inset(20% 0 60% 0);
        transform: translate3d(0, 0, 0);
    }
    70% {
        clip-path: inset(35% 0 45% 0);
        transform: translate3d(calc(var(--glitch-strength) * -1), 0, 0);
    }
    80% {
        clip-path: inset(55% 0 25% 0);
        transform: translate3d(0, 0, 0);
    }
    90% {
        clip-path: inset(15% 0 70% 0);
        transform: translate3d(var(--glitch-strength), 0, 0);
    }
    100% {
        clip-path: inset(0 0 80% 0);
        transform: translate3d(0, 0, 0);
    }
}

/* Magenta slice: complementary bands to enhance the RGB split */
@keyframes glitch-slice-b {
    0% {
        clip-path: inset(85% 0 0 0);
        transform: translate3d(0, 0, 0);
    }
    10% {
        clip-path: inset(70% 0 5% 0);
        transform: translate3d(calc(var(--glitch-strength) * -1), 0, 0);
    }
    20% {
        clip-path: inset(50% 0 20% 0);
        transform: translate3d(0, 0, 0);
    }
    30% {
        clip-path: inset(35% 0 35% 0);
        transform: translate3d(var(--glitch-strength), 0, 0);
    }
    40% {
        clip-path: inset(25% 0 50% 0);
        transform: translate3d(0, 0, 0);
    }
    50% {
        clip-path: inset(10% 0 70% 0);
        transform: translate3d(calc(var(--glitch-strength) * -1), 0, 0);
    }
    60% {
        clip-path: inset(55% 0 25% 0);
        transform: translate3d(0, 0, 0);
    }
    70% {
        clip-path: inset(40% 0 40% 0);
        transform: translate3d(var(--glitch-strength), 0, 0);
    }
    80% {
        clip-path: inset(30% 0 55% 0);
        transform: translate3d(0, 0, 0);
    }
    90% {
        clip-path: inset(5% 0 75% 0);
        transform: translate3d(calc(var(--glitch-strength) * -1), 0, 0);
    }
    100% {
        clip-path: inset(85% 0 0 0);
        transform: translate3d(0, 0, 0);
    }
}

/* Subtle visibility flicker applied to both coloured layers */
@keyframes glitch-flicker {
    0%,
    18%,
    22%,
    40%,
    60%,
    64%,
    78%,
    100% {
        opacity: 1;
    }
    20%,
    62% {
        opacity: 0.15;
    }
}

/* Respect reduced motion preferences by disabling animations and filters */
@media (prefers-reduced-motion: reduce) {
    .glitch,
    .glitch::before,
    .glitch::after {
        animation: none !important;
        opacity: 1 !important;
        filter: none !important;
        transform: none !important;
        clip-path: none !important;
    }
}
